{"version":3,"sources":["Components/Header/Header.js","Components/CompanyTotalIncome/CompanyTotalIncome.js","Components/CompanyAverageIncome/CompanyAverageIncome.js","Components/CompanyLastMonthIncome/CompanyLastMonthIncome.js","Components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","type","placeholder","onChange","inputOnChange","CompanyTotalIncome","state","companyID","companiesIncome","axios","get","this","then","res","setState","data","incomes","totalIncome","reduce","prev","cur","parseInt","value","Component","CompanyAverageIncome","averageIncome","length","CompanyLastMonthIncome","Table","companies","filter","companiesRowList","company","name","toLowerCase","indexOf","city","map","key","id","onClick","sortById","sortByAlphabeticalOrder","App","direction","categoryAscending","inputFilter","bind","event","target","sort","a","b","textA","toUpperCase","textB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.163eb432.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1>Company Table</h1>\r\n            <div className=\"input-container\">\r\n                <i className=\"fas fa-search\"></i>\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Filter...\"\r\n                    onChange={props.inputOnChange}\r\n                />\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass CompanyTotalIncome extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            companyID: props.companyID,\r\n            companiesIncome: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {  \r\n       \r\n        axios.get(`https://recruitment.hal.skygate.io/incomes/${this.state.companyID}`) \r\n        .then(res => {\r\n            this.setState({companiesIncome: res.data.incomes});\r\n        })\r\n\r\n    }\r\n    \r\n    render() {\r\n        const totalIncome = this.state.companiesIncome && this.state.companiesIncome.reduce(function(prev, cur) {\r\n            return parseInt(prev) + parseInt(cur.value) ;\r\n          }, 0);\r\n        return(\r\n            <>\r\n                <th>{totalIncome}</th>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CompanyTotalIncome","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass CompanyAverageIncome extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            companyID: props.companyID,\r\n            companiesIncome: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {  \r\n       \r\n        axios.get(`https://recruitment.hal.skygate.io/incomes/${this.state.companyID}`) \r\n        .then(res => {\r\n            this.setState({companiesIncome: res.data.incomes});\r\n        })\r\n\r\n    }\r\n    \r\n    render() {\r\n        const totalIncome = this.state.companiesIncome && this.state.companiesIncome.reduce(function(prev, cur) {\r\n            return parseInt(prev) + parseInt(cur.value);\r\n          }, 0);\r\n        const averageIncome = totalIncome / this.state.companiesIncome.length;\r\n        return(\r\n            <>\r\n                <th>{averageIncome}</th>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CompanyAverageIncome","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass CompanyLastMonthIncome extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            companyID: props.companyID,\r\n            companiesIncome: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {  \r\n       \r\n        axios.get(`https://recruitment.hal.skygate.io/incomes/${this.state.companyID}`) \r\n        .then(res => {\r\n            this.setState({companiesIncome: res.data.incomes});\r\n        })\r\n\r\n    }\r\n    \r\n    render() {\r\n        /*\r\n        // Calculations to get last month\r\n        const currentDate = new Date();\r\n        const month = currentDate.getMonth();\r\n        currentDate.setMonth(currentDate.getMonth() - 1);\r\n        while (currentDate.getMonth() === month) {\r\n            currentDate.setDate(currentDate.getDate() - 1);\r\n        }\r\n        // Last month date in miliseconds\r\n        let lastMonthInMiliseconds = currentDate.getTime();\r\n        //Current Date in miliseconds\r\n        let currentDateInMiliseconds = new Date();\r\n        currentDateInMiliseconds.getTime();\r\n\r\n        const totalIncome = this.state.companiesIncome && this.state.companiesIncome;\r\n\r\n            totalIncome.filter(({date}) => date.getTime() >= lastMonthInMiliseconds)\r\n            .reduce((prev, cur) => prev + cur.value);\r\n        */\r\n        return(\r\n            <>\r\n                <th>-</th>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CompanyLastMonthIncome","import React, { Component } from 'react';\r\nimport CompanyTotalIncome from '../CompanyTotalIncome/CompanyTotalIncome';\r\nimport CompanyAverageIncome from '../CompanyAverageIncome/CompanyAverageIncome';\r\nimport CompanyLastMonthIncome from '../CompanyLastMonthIncome/CompanyLastMonthIncome';\r\nimport './Table.css';\r\n\r\nclass Table extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n     \r\n    }\r\n  }\r\n  \r\n  render() {\r\n    const { companies, filter} = this.props;\r\n\r\n    const companiesRowList = companies && companies\r\n      .filter( company => {\r\n        return [company.name.toLowerCase().indexOf(filter.toLowerCase()) && company.city.toLowerCase().indexOf(filter.toLowerCase())]  >= 0\r\n      })\r\n      .map( company => {\r\n        return (\r\n\r\n          <tr className=\"hover-row\" key={company.id}>\r\n              <th>{company.id}</th>\r\n              <th>{company.name}</th>\r\n              <th>{company.city}</th>\r\n              <CompanyTotalIncome companyID={company.id}/>\r\n              <CompanyAverageIncome companyID={company.id}/>\r\n              <CompanyLastMonthIncome companyID={company.id}/>\r\n          </tr>\r\n\r\n        );\r\n      });\r\n\r\n    return (\r\n      <table className=\"table\">\r\n        <thead>\r\n            <tr>\r\n              <th onClick={this.props.sortById}>ID</th>\r\n              <th onClick={() => this.props.sortByAlphabeticalOrder('name')}>Name</th>\r\n              <th onClick={() => this.props.sortByAlphabeticalOrder('city')}>Cities</th>\r\n              <th>Total income</th>\r\n              <th>Average income</th>\r\n              <th>Company last month income</th>\r\n            </tr>\r\n        </thead>\r\n        {companiesRowList}\r\n      </table>\r\n    );\r\n  }  \r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from 'react';\nimport Header from './Components/Header/Header';\nimport Table from './Components/Table/Table';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n\n      companies: null,\n      direction: {\n        id: 'asc',\n        categoryAscending: true,\n      },\n      filter: '',\n    }\n    this.inputFilter = this.inputFilter.bind(this);\n    this.sortById = this.sortById.bind(this);\n    this.sortByAlphabeticalOrder = this.sortByAlphabeticalOrder.bind(this);\n  }\n  \n  componentWillMount() {   \n    axios.get(\"https://recruitment.hal.skygate.io/companies\")\n    .then(res => {\n      this.setState({companies: res.data});\n    })\n  }\n\n  inputFilter(event) {\n    this.setState({ filter: event.target.value });\n  }\n\n  sortById() {\n    this.setState({\n      companies: this.state.companies.sort( (a, b) => (\n        this.state.direction.id === 'asc'\n        ? a.id - b.id\n        : b.id - a.id\n      )),\n      direction: {\n        id: this.state.direction.id === 'asc'\n        ? 'desc'\n        : 'asc'\n      }\n    })\n  }\n\n  sortByAlphabeticalOrder(key) {\n    this.setState({\n      companies: this.state.companies.sort( (a, b) => {\n        let textA = a[key].toUpperCase();\n        let textB = b[key].toUpperCase();\n        if (this.state.direction.categoryAscending === true) {\n          return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n        } else {\n          return (textA > textB) ? -1 : (textA < textB) ? 1 : 0;\n        }\n      }),\n      direction: {\n        categoryAscending: !this.state.direction.categoryAscending,\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Header \n          inputOnChange={this.inputFilter}\n        />\n        <Table \n          companies={this.state.companies} \n          direction={this.state.direction} \n          filter={this.state.filter} \n          sortById={this.sortById} \n          sortByAlphabeticalOrder={this.sortByAlphabeticalOrder} \n        />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}